<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"> <!-- bean definitions here -->

    <!--Spring工厂的后置处理器-->
    <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>

    <!--实体Bean,由Spring（IOC容器）管理并自动注入（DI）相关属性和对象-->
    <!--DI主要有三种：属性注入、构造方法注入、工厂的方式注入-->
    <!--Dao层实体bean-->
    <bean id="uDao" class="com.yanghao.daoimpl.UserDaoImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"></property>
        <property name="transactionTemplate" ref="transactionTemplate"></property>
    </bean>

    <!--Service层实体Bean（业务逻辑类）-->
    <bean id="uService" class="com.yanghao.serviceimpl.UserServiceImpl">
        <property name="userDao" ref="uDao"></property>
    </bean>

    <!--依赖Bean-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.DriverManagerDataSource">
        <property name="driverClass" value="${driverClass}"/>
        <property name="jdbcUrl" value="${jdbcUrl}"/>
        <property name="user" value="{user}"/>
        <property name="password" value="${password}"/>
    </bean><!--数据源-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean><!--JdbcTemplate类-->

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean><!--事务管理员-->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"></property>
    </bean><!--事务模板-->
    <tx:advice id="advice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="login"/>
            <tx:method name="register"/>
        </tx:attributes>
    </tx:advice><!--对当前配置的方法进行事务管理-->



    <!--AOP增强实体Bean（增强类）-->
    <bean id="usStrong" class="com.yanghao.serviceimpl.UserServiceImplStrong"></bean>


    <!--AOP配置-->
    <aop:config>

        <!--配置切入点(要增强的方法)-->
        <!--
            [execution 固定写法]-[第一个* 代表任意返回值]-[com.xyz.myapp.service ：包名]-[第二个* 包下的任意类]-[第三个* 类中的任意方法]
			-[(..) : 任意参数]
        -->
        <aop:pointcut id="usLogin" expression="execution(* com.yanghao.serviceimpl.*.*(..))"/>

        <!--配置增强（增强类的增强方法）-->
        <aop:aspect ref="usStrong">
            <aop:before method="strongBefore" pointcut-ref="usLogin"/>
            <!--<aop:after-returning method="strongAfter" pointcut-ref="usLogin"/>-->
            <!--<aop:around method="around" pointcut-ref="usLogin"/>-->
            <!--<aop:after method="after" pointcut-ref="usLogin"/>-->
        </aop:aspect>
    </aop:config>

    <aop:config>
        <aop:pointcut id="adviceMethods" expression="execution(* com.yanghao.daoimpl.*.*(..))"></aop:pointcut>
        <aop:advisor advice-ref="advice" pointcut-ref="adviceMethods"/>
    </aop:config>

</beans>